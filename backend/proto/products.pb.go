// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/products.proto

package product

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google/api"
	_ "google/protobuf"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderDirection int32

const (
	ASC  OrderDirection = 0
	DESC OrderDirection = 1
)

var OrderDirection_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var OrderDirection_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (OrderDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a14f0155623d3d8a, []int{0}
}

type ListProductRequestOrderField int32

const (
	NONE ListProductRequestOrderField = 0
	NAME ListProductRequestOrderField = 1
)

var ListProductRequestOrderField_name = map[int32]string{
	0: "NONE",
	1: "NAME",
}

var ListProductRequestOrderField_value = map[string]int32{
	"NONE": 0,
	"NAME": 1,
}

func (ListProductRequestOrderField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a14f0155623d3d8a, []int{1}
}

type Product struct {
	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Product) Reset()      { *m = Product{} }
func (*Product) ProtoMessage() {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_a14f0155623d3d8a, []int{0}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return m.Size()
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type IDRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *IDRequest) Reset()      { *m = IDRequest{} }
func (*IDRequest) ProtoMessage() {}
func (*IDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a14f0155623d3d8a, []int{1}
}
func (m *IDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDRequest.Merge(m, src)
}
func (m *IDRequest) XXX_Size() int {
	return m.Size()
}
func (m *IDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IDRequest proto.InternalMessageInfo

func (m *IDRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CreateProductRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateProductRequest) Reset()      { *m = CreateProductRequest{} }
func (*CreateProductRequest) ProtoMessage() {}
func (*CreateProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a14f0155623d3d8a, []int{2}
}
func (m *CreateProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProductRequest.Merge(m, src)
}
func (m *CreateProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProductRequest proto.InternalMessageInfo

func (m *CreateProductRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateProductRequest struct {
	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UpdateProductRequest) Reset()      { *m = UpdateProductRequest{} }
func (*UpdateProductRequest) ProtoMessage() {}
func (*UpdateProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a14f0155623d3d8a, []int{3}
}
func (m *UpdateProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProductRequest.Merge(m, src)
}
func (m *UpdateProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProductRequest proto.InternalMessageInfo

func (m *UpdateProductRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateProductRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListProductsReponse struct {
	Products   []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	TotalCount int64      `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (m *ListProductsReponse) Reset()      { *m = ListProductsReponse{} }
func (*ListProductsReponse) ProtoMessage() {}
func (*ListProductsReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a14f0155623d3d8a, []int{4}
}
func (m *ListProductsReponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProductsReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProductsReponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProductsReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProductsReponse.Merge(m, src)
}
func (m *ListProductsReponse) XXX_Size() int {
	return m.Size()
}
func (m *ListProductsReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProductsReponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProductsReponse proto.InternalMessageInfo

func (m *ListProductsReponse) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *ListProductsReponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type ListProductsRequestOrder struct {
	Field     ListProductRequestOrderField `protobuf:"varint,1,opt,name=field,proto3,enum=product.ListProductRequestOrderField" json:"field,omitempty"`
	Direction OrderDirection               `protobuf:"varint,2,opt,name=direction,proto3,enum=product.OrderDirection" json:"direction,omitempty"`
}

func (m *ListProductsRequestOrder) Reset()      { *m = ListProductsRequestOrder{} }
func (*ListProductsRequestOrder) ProtoMessage() {}
func (*ListProductsRequestOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_a14f0155623d3d8a, []int{5}
}
func (m *ListProductsRequestOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProductsRequestOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProductsRequestOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProductsRequestOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProductsRequestOrder.Merge(m, src)
}
func (m *ListProductsRequestOrder) XXX_Size() int {
	return m.Size()
}
func (m *ListProductsRequestOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProductsRequestOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ListProductsRequestOrder proto.InternalMessageInfo

func (m *ListProductsRequestOrder) GetField() ListProductRequestOrderField {
	if m != nil {
		return m.Field
	}
	return NONE
}

func (m *ListProductsRequestOrder) GetDirection() OrderDirection {
	if m != nil {
		return m.Direction
	}
	return ASC
}

type ListProductsRequestFilter struct {
	NameLike string `protobuf:"bytes,1,opt,name=name_like,json=nameLike,proto3" json:"name_like,omitempty"`
}

func (m *ListProductsRequestFilter) Reset()      { *m = ListProductsRequestFilter{} }
func (*ListProductsRequestFilter) ProtoMessage() {}
func (*ListProductsRequestFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_a14f0155623d3d8a, []int{6}
}
func (m *ListProductsRequestFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProductsRequestFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProductsRequestFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProductsRequestFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProductsRequestFilter.Merge(m, src)
}
func (m *ListProductsRequestFilter) XXX_Size() int {
	return m.Size()
}
func (m *ListProductsRequestFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProductsRequestFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ListProductsRequestFilter proto.InternalMessageInfo

func (m *ListProductsRequestFilter) GetNameLike() string {
	if m != nil {
		return m.NameLike
	}
	return ""
}

type ListProductsRequest struct {
	Limit   int64                      `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int64                      `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	OrderBy *ListProductsRequestOrder  `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Filter  *ListProductsRequestFilter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *ListProductsRequest) Reset()      { *m = ListProductsRequest{} }
func (*ListProductsRequest) ProtoMessage() {}
func (*ListProductsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a14f0155623d3d8a, []int{7}
}
func (m *ListProductsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProductsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProductsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProductsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProductsRequest.Merge(m, src)
}
func (m *ListProductsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListProductsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProductsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProductsRequest proto.InternalMessageInfo

func (m *ListProductsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListProductsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListProductsRequest) GetOrderBy() *ListProductsRequestOrder {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListProductsRequest) GetFilter() *ListProductsRequestFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func init() {
	proto.RegisterEnum("product.OrderDirection", OrderDirection_name, OrderDirection_value)
	proto.RegisterEnum("product.ListProductRequestOrderField", ListProductRequestOrderField_name, ListProductRequestOrderField_value)
	proto.RegisterType((*Product)(nil), "product.Product")
	proto.RegisterType((*IDRequest)(nil), "product.IDRequest")
	proto.RegisterType((*CreateProductRequest)(nil), "product.CreateProductRequest")
	proto.RegisterType((*UpdateProductRequest)(nil), "product.UpdateProductRequest")
	proto.RegisterType((*ListProductsReponse)(nil), "product.ListProductsReponse")
	proto.RegisterType((*ListProductsRequestOrder)(nil), "product.ListProductsRequestOrder")
	proto.RegisterType((*ListProductsRequestFilter)(nil), "product.ListProductsRequestFilter")
	proto.RegisterType((*ListProductsRequest)(nil), "product.ListProductsRequest")
}

func init() { proto.RegisterFile("proto/products.proto", fileDescriptor_a14f0155623d3d8a) }

var fileDescriptor_a14f0155623d3d8a = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x6a, 0x13, 0x4f,
	0x14, 0xc7, 0x77, 0x92, 0xb6, 0x49, 0x4e, 0x68, 0x7e, 0xe1, 0xfc, 0xd2, 0x76, 0x4d, 0xda, 0x31,
	0xae, 0x08, 0x21, 0x68, 0x82, 0x51, 0x41, 0xaa, 0x37, 0x6d, 0x92, 0x8a, 0x50, 0x5b, 0xdd, 0xe2,
	0x8d, 0x20, 0x25, 0xcd, 0x4e, 0xca, 0xd0, 0x6d, 0x36, 0xee, 0x4e, 0x0a, 0x45, 0x04, 0xf1, 0x01,
	0x44, 0xf0, 0x25, 0x7c, 0x09, 0xef, 0xbd, 0x2c, 0x78, 0xd3, 0x4b, 0xbb, 0xf1, 0xc2, 0xcb, 0x3e,
	0x82, 0xec, 0xec, 0x9f, 0x26, 0xcd, 0xb6, 0x78, 0xb7, 0x67, 0xe6, 0x7c, 0x3f, 0xe7, 0xcc, 0x77,
	0xe7, 0x0c, 0x14, 0x06, 0xb6, 0x25, 0xac, 0xfa, 0xc0, 0xb6, 0x8c, 0x61, 0x57, 0x38, 0x35, 0x19,
	0x62, 0x2a, 0x88, 0x8b, 0xcb, 0xfb, 0x96, 0xb5, 0x6f, 0xb2, 0x7a, 0x67, 0xc0, 0xeb, 0x9d, 0x7e,
	0xdf, 0x12, 0x1d, 0xc1, 0xad, 0x7e, 0x90, 0x56, 0x2c, 0x05, 0xbb, 0x32, 0xda, 0x1b, 0xf6, 0xea,
	0xec, 0x70, 0x20, 0x8e, 0xfd, 0x4d, 0xed, 0x1e, 0xa4, 0x5e, 0xfa, 0x14, 0xcc, 0x41, 0x82, 0x1b,
	0x2a, 0x29, 0x93, 0x4a, 0x52, 0x4f, 0x70, 0x03, 0x11, 0x66, 0xfa, 0x9d, 0x43, 0xa6, 0x26, 0xca,
	0xa4, 0x92, 0xd1, 0xe5, 0xb7, 0x56, 0x82, 0xcc, 0xf3, 0x96, 0xce, 0xde, 0x0d, 0x99, 0x33, 0x25,
	0xd0, 0xaa, 0x50, 0x68, 0xda, 0xac, 0x23, 0x58, 0x40, 0x0c, 0xf3, 0x42, 0x10, 0x19, 0x03, 0xad,
	0x42, 0xe1, 0xf5, 0xc0, 0x98, 0xce, 0xfd, 0x97, 0x26, 0x0c, 0xf8, 0x7f, 0x93, 0x3b, 0x22, 0x50,
	0x3a, 0x3a, 0x1b, 0x58, 0x7d, 0x87, 0xe1, 0x5d, 0x48, 0x87, 0x06, 0xa9, 0xa4, 0x9c, 0xac, 0x64,
	0x1b, 0xf9, 0x5a, 0xb0, 0x50, 0x0b, 0xab, 0x44, 0x19, 0x78, 0x13, 0xb2, 0xc2, 0x12, 0x1d, 0x73,
	0xb7, 0x6b, 0x0d, 0xfb, 0x42, 0xf2, 0x93, 0x3a, 0xc8, 0xa5, 0xa6, 0xb7, 0xa2, 0x7d, 0x26, 0xa0,
	0x4e, 0x96, 0x91, 0x1d, 0x6e, 0xdb, 0x06, 0xb3, 0xf1, 0x09, 0xcc, 0xf6, 0x38, 0x33, 0xfd, 0x4e,
	0x73, 0x8d, 0x3b, 0x51, 0xa1, 0x31, 0xc5, 0xb8, 0x60, 0xc3, 0x4b, 0xd6, 0x7d, 0x0d, 0x3e, 0x82,
	0x8c, 0xc1, 0x6d, 0xd6, 0xf5, 0x7e, 0x92, 0x2c, 0x9c, 0x6b, 0x2c, 0x45, 0x00, 0x99, 0xde, 0x0a,
	0xb7, 0xf5, 0x8b, 0x4c, 0xed, 0x31, 0xdc, 0x88, 0xe9, 0x67, 0x83, 0x9b, 0x82, 0xd9, 0x58, 0x82,
	0x8c, 0xe7, 0xcd, 0xae, 0xc9, 0x0f, 0x42, 0xa3, 0xd3, 0xde, 0xc2, 0x26, 0x3f, 0x60, 0xda, 0x77,
	0x72, 0xd9, 0x31, 0xdf, 0xec, 0x02, 0xcc, 0x9a, 0xfc, 0x90, 0x8b, 0xc0, 0x6f, 0x3f, 0xc0, 0x45,
	0x98, 0xb3, 0x7a, 0x3d, 0x87, 0x85, 0xa6, 0x04, 0x11, 0x3e, 0x85, 0xb4, 0xe5, 0x35, 0xb7, 0xbb,
	0x77, 0xac, 0x26, 0xcb, 0xa4, 0x92, 0x6d, 0xdc, 0x8a, 0x3b, 0xf6, 0x84, 0x51, 0x7a, 0x4a, 0x4a,
	0xd6, 0x8f, 0x71, 0x15, 0xe6, 0x7a, 0xb2, 0x55, 0x75, 0x46, 0x6a, 0xb5, 0xeb, 0xb4, 0xfe, 0xa1,
	0xf4, 0x40, 0x51, 0xbd, 0x0d, 0xb9, 0x49, 0x5b, 0x30, 0x05, 0xc9, 0xb5, 0x9d, 0x66, 0x5e, 0xc1,
	0x34, 0xcc, 0xb4, 0xda, 0x3b, 0xcd, 0x3c, 0xa9, 0x36, 0x60, 0xf9, 0x3a, 0xf3, 0xbd, 0xcc, 0xad,
	0xed, 0xad, 0xb6, 0xaf, 0xd9, 0x5a, 0x7b, 0xd1, 0xce, 0x93, 0xc6, 0x28, 0x09, 0xff, 0x85, 0xa5,
	0x77, 0x98, 0x7d, 0xc4, 0xbb, 0x0c, 0x5f, 0x01, 0x3c, 0x63, 0x21, 0x06, 0x31, 0x6a, 0x33, 0xba,
	0xf7, 0xc5, 0xa9, 0x6b, 0xa5, 0xad, 0x7c, 0xfa, 0xf9, 0xfb, 0x6b, 0x62, 0x09, 0x17, 0xe4, 0x08,
	0x1e, 0xdd, 0x8f, 0x26, 0xb5, 0xfe, 0x9e, 0x1b, 0x1f, 0xb0, 0x0b, 0xd9, 0x0b, 0xa4, 0x83, 0xcb,
	0xd7, 0x1d, 0xbd, 0x78, 0xd5, 0xae, 0xbc, 0xe4, 0x9a, 0x2a, 0x2b, 0x21, 0xe6, 0x2f, 0x57, 0xc2,
	0xb7, 0x30, 0x3f, 0x31, 0x7d, 0xb8, 0x12, 0x81, 0xe2, 0xa6, 0x32, 0xe6, 0x14, 0x25, 0xc9, 0x5e,
	0xd0, 0xa6, 0xd8, 0xab, 0xa4, 0xea, 0xe1, 0x27, 0x06, 0x76, 0x0c, 0x1f, 0x37, 0xc8, 0x57, 0xe3,
	0x8b, 0xb1, 0xf8, 0x37, 0x30, 0xdf, 0x62, 0x26, 0xbb, 0xc0, 0xc7, 0x19, 0xbf, 0x58, 0xf3, 0x9f,
	0xb2, 0x5a, 0xf8, 0x94, 0xd5, 0xda, 0xde, 0x53, 0x16, 0xda, 0x5f, 0x8d, 0xb7, 0x7f, 0xfd, 0xe1,
	0xc9, 0x19, 0x55, 0x4e, 0xcf, 0xa8, 0x72, 0x7e, 0x46, 0xc9, 0x47, 0x97, 0x92, 0x6f, 0x2e, 0x25,
	0x3f, 0x5c, 0x4a, 0x4e, 0x5c, 0x4a, 0x7e, 0xb9, 0x94, 0xfc, 0x71, 0xa9, 0x72, 0xee, 0x52, 0xf2,
	0x65, 0x44, 0x95, 0x93, 0x11, 0x55, 0x4e, 0x47, 0x54, 0xd9, 0x9b, 0x93, 0x45, 0x1e, 0xfc, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x31, 0x2e, 0xae, 0x37, 0x7c, 0x05, 0x00, 0x00,
}

func (x OrderDirection) String() string {
	s, ok := OrderDirection_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ListProductRequestOrderField) String() string {
	s, ok := ListProductRequestOrderField_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Product) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Product)
	if !ok {
		that2, ok := that.(Product)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *IDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IDRequest)
	if !ok {
		that2, ok := that.(IDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *CreateProductRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateProductRequest)
	if !ok {
		that2, ok := that.(CreateProductRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *UpdateProductRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateProductRequest)
	if !ok {
		that2, ok := that.(UpdateProductRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ListProductsReponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListProductsReponse)
	if !ok {
		that2, ok := that.(ListProductsReponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Products) != len(that1.Products) {
		return false
	}
	for i := range this.Products {
		if !this.Products[i].Equal(that1.Products[i]) {
			return false
		}
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	return true
}
func (this *ListProductsRequestOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListProductsRequestOrder)
	if !ok {
		that2, ok := that.(ListProductsRequestOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	return true
}
func (this *ListProductsRequestFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListProductsRequestFilter)
	if !ok {
		that2, ok := that.(ListProductsRequestFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NameLike != that1.NameLike {
		return false
	}
	return true
}
func (this *ListProductsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListProductsRequest)
	if !ok {
		that2, ok := that.(ListProductsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if !this.OrderBy.Equal(that1.OrderBy) {
		return false
	}
	if !this.Filter.Equal(that1.Filter) {
		return false
	}
	return true
}
func (this *Product) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&product.Product{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&product.IDRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateProductRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&product.CreateProductRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateProductRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&product.UpdateProductRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListProductsReponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&product.ListProductsReponse{")
	if this.Products != nil {
		s = append(s, "Products: "+fmt.Sprintf("%#v", this.Products)+",\n")
	}
	s = append(s, "TotalCount: "+fmt.Sprintf("%#v", this.TotalCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListProductsRequestOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&product.ListProductsRequestOrder{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "Direction: "+fmt.Sprintf("%#v", this.Direction)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListProductsRequestFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&product.ListProductsRequestFilter{")
	s = append(s, "NameLike: "+fmt.Sprintf("%#v", this.NameLike)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListProductsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&product.ListProductsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	if this.OrderBy != nil {
		s = append(s, "OrderBy: "+fmt.Sprintf("%#v", this.OrderBy)+",\n")
	}
	if this.Filter != nil {
		s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProducts(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Product) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProducts(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProducts(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintProducts(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateProductRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateProductRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProducts(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProductRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProductRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProducts(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProducts(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListProductsReponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProductsReponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProductsReponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		i = encodeVarintProducts(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Products) > 0 {
		for iNdEx := len(m.Products) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Products[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProducts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListProductsRequestOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProductsRequestOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProductsRequestOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintProducts(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x10
	}
	if m.Field != 0 {
		i = encodeVarintProducts(dAtA, i, uint64(m.Field))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListProductsRequestFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProductsRequestFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProductsRequestFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NameLike) > 0 {
		i -= len(m.NameLike)
		copy(dAtA[i:], m.NameLike)
		i = encodeVarintProducts(dAtA, i, uint64(len(m.NameLike)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListProductsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProductsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProductsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProducts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OrderBy != nil {
		{
			size, err := m.OrderBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProducts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintProducts(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintProducts(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProducts(dAtA []byte, offset int, v uint64) int {
	offset -= sovProducts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProducts(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProducts(uint64(l))
	}
	return n
}

func (m *IDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProducts(uint64(m.Id))
	}
	return n
}

func (m *CreateProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProducts(uint64(l))
	}
	return n
}

func (m *UpdateProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProducts(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProducts(uint64(l))
	}
	return n
}

func (m *ListProductsReponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Products) > 0 {
		for _, e := range m.Products {
			l = e.Size()
			n += 1 + l + sovProducts(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovProducts(uint64(m.TotalCount))
	}
	return n
}

func (m *ListProductsRequestOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovProducts(uint64(m.Field))
	}
	if m.Direction != 0 {
		n += 1 + sovProducts(uint64(m.Direction))
	}
	return n
}

func (m *ListProductsRequestFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NameLike)
	if l > 0 {
		n += 1 + l + sovProducts(uint64(l))
	}
	return n
}

func (m *ListProductsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovProducts(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovProducts(uint64(m.Offset))
	}
	if m.OrderBy != nil {
		l = m.OrderBy.Size()
		n += 1 + l + sovProducts(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovProducts(uint64(l))
	}
	return n
}

func sovProducts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProducts(x uint64) (n int) {
	return sovProducts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Product) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Product{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IDRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateProductRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateProductRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateProductRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateProductRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListProductsReponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProducts := "[]*Product{"
	for _, f := range this.Products {
		repeatedStringForProducts += strings.Replace(f.String(), "Product", "Product", 1) + ","
	}
	repeatedStringForProducts += "}"
	s := strings.Join([]string{`&ListProductsReponse{`,
		`Products:` + repeatedStringForProducts + `,`,
		`TotalCount:` + fmt.Sprintf("%v", this.TotalCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListProductsRequestOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListProductsRequestOrder{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListProductsRequestFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListProductsRequestFilter{`,
		`NameLike:` + fmt.Sprintf("%v", this.NameLike) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListProductsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListProductsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`OrderBy:` + strings.Replace(this.OrderBy.String(), "ListProductsRequestOrder", "ListProductsRequestOrder", 1) + `,`,
		`Filter:` + strings.Replace(this.Filter.String(), "ListProductsRequestFilter", "ListProductsRequestFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProducts(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProducts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProducts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProducts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProducts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProducts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProducts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProducts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProducts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProducts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProducts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProducts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProducts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProducts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProducts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProducts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProducts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProducts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProducts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProductsReponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProducts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProductsReponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProductsReponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Products", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProducts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProducts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Products = append(m.Products, &Product{})
			if err := m.Products[len(m.Products)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProducts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProducts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProductsRequestOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProducts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProductsRequestOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProductsRequestOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= ListProductRequestOrderField(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= OrderDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProducts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProducts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProductsRequestFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProducts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProductsRequestFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProductsRequestFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameLike", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProducts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProducts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameLike = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProducts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProducts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProductsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProducts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProductsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProductsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProducts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProducts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderBy == nil {
				m.OrderBy = &ListProductsRequestOrder{}
			}
			if err := m.OrderBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProducts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProducts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &ListProductsRequestFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProducts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProducts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProducts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProducts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProducts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProducts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProducts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProducts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProducts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProducts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProducts = fmt.Errorf("proto: unexpected end of group")
)
